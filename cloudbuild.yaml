# cloudbuild.yaml
# This is the master blueprint for building our multi-service application.
# It gives us explicit control over the build process for each service.

steps:
# 1. Build the Frontend ("Waiter") Service Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/frontend-service:latest',
    '--file=frontend/Dockerfile', # Use the frontend's Dockerfile
    '.'  # Use the entire project root as the build context
  ]

# 2. Build the Worker ("Kitchen") Service Docker Image
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/worker-service:latest',
    '--file=worker/Dockerfile', # Use the worker's Dockerfile
    '.' # Also use the entire project root as the build context
  ]

# 3. Push both images to the Google Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/frontend-service:latest']
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/worker-service:latest']

# 4. Deploy the services to App Engine using the pre-built images
# This is faster and more reliable.
- name: 'gcr.io/google-appengine/exec-wrapper'
  args: [
    'gcloud', 'app', 'deploy',
    'frontend/app.yaml',
    'worker/worker.yaml',
    '--image-url', 'gcr.io/$PROJECT_ID/frontend-service:latest', # Deploy frontend with its image
    '--image-url', 'gcr.io/$PROJECT_ID/worker-service:latest' # Deploy worker with its image
  ]

# Store the images for faster future builds
images:
- 'gcr.io/$PROJECT_ID/frontend-service:latest'
- 'gcr.io/$PROJECT_ID/worker-service:latest'

